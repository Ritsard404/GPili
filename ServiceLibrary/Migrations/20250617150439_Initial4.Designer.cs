// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServiceLibrary.Data;

#nullable disable

namespace ServiceLibrary.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250617150439_Initial4")]
    partial class Initial4
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("ServiceLibrary.Models.AlternativePayment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<long>("InvoiceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SaleTypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("SaleTypeId");

                    b.ToTable("AlternativePayment");
                });

            modelBuilder.Entity("ServiceLibrary.Models.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<string>("CashierEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ManagerEmail")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CashierEmail");

                    b.HasIndex("ManagerEmail");

                    b.ToTable("AuditLog");
                });

            modelBuilder.Entity("ServiceLibrary.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CtgryName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("ServiceLibrary.Models.Invoice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("CashTendered")
                        .HasColumnType("TEXT");

                    b.Property<string>("CashierEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("ChangeAmount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("DiscountAmount")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DiscountPercent")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DiscountType")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("DueAmount")
                        .HasColumnType("TEXT");

                    b.Property<string>("EligibleDiscName")
                        .HasColumnType("TEXT");

                    b.Property<long>("InvoiceNumber")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRead")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsTrainMode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OSCAIdNum")
                        .HasColumnType("TEXT");

                    b.Property<int>("PrintCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StatusChangeDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("TotalTendered")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("VatAmount")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("VatExempt")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("VatSales")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CashierEmail");

                    b.ToTable("Invoice");
                });

            modelBuilder.Entity("ServiceLibrary.Models.Item", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<long>("InvoiceId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsTrainingMode")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVoid")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Qty")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("SubTotal")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ProductId");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("ServiceLibrary.Models.Journal", b =>
                {
                    b.Property<long>("UniqueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("unique_id");

                    b.Property<string>("AccountBalance")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Cashier")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Cost")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CostCenter")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Count_Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Credit")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Curr_Reading")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Debit")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Deposit_By")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Deposit_Date")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Deposit_Reference")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Deposit_Time")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Deposited")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discount_Amount")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discount_Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Entry_Date")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Entry_Line_No")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Entry_Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Entry_No")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Entry_Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("GrossTotal")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Kombantrin")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Memo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NetPayable")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Prev_Reading")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Qty")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("QtyBalanceInBaseUnit")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("QtyPerBaseUnit")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SubTotal")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TotalPrice")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TotalTax")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("User_Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UniqueId");

                    b.ToTable("AccountJournal");
                });

            modelBuilder.Entity("ServiceLibrary.Models.PosTerminalInfo", b =>
                {
                    b.Property<string>("PosSerialNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("AccreditationNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BranchCenter")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CostCenter")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateIssued")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsTrainMode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MinNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OperatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PtuNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RegisteredName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ResetCounterNo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ResetCounterTrainNo")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ValidUntil")
                        .HasColumnType("TEXT");

                    b.Property<string>("VatTinNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ZCounterNo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ZCounterTrainNo")
                        .HasColumnType("INTEGER");

                    b.HasKey("PosSerialNumber");

                    b.ToTable("PosTerminalInfo");
                });

            modelBuilder.Entity("ServiceLibrary.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagePath")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("ServiceLibrary.Models.SaleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SaleType");
                });

            modelBuilder.Entity("ServiceLibrary.Models.Timestamp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("CashInDrawerAmount")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("CashOutDrawerAmount")
                        .HasColumnType("TEXT");

                    b.Property<string>("CashierEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsTrainMode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ManagerInEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ManagerOutEmail")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("TsIn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("TsOut")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("WithdrawnDrawerAmount")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CashierEmail");

                    b.HasIndex("ManagerInEmail");

                    b.HasIndex("ManagerOutEmail");

                    b.ToTable("Timestamp");
                });

            modelBuilder.Entity("ServiceLibrary.Models.User", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Email");

                    b.ToTable("User");
                });

            modelBuilder.Entity("ServiceLibrary.Models.AlternativePayment", b =>
                {
                    b.HasOne("ServiceLibrary.Models.Invoice", "Invoice")
                        .WithMany("AlternativePayments")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServiceLibrary.Models.SaleType", "SaleType")
                        .WithMany()
                        .HasForeignKey("SaleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("SaleType");
                });

            modelBuilder.Entity("ServiceLibrary.Models.AuditLog", b =>
                {
                    b.HasOne("ServiceLibrary.Models.User", "Cashier")
                        .WithMany()
                        .HasForeignKey("CashierEmail");

                    b.HasOne("ServiceLibrary.Models.User", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerEmail");

                    b.Navigation("Cashier");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("ServiceLibrary.Models.Invoice", b =>
                {
                    b.HasOne("ServiceLibrary.Models.User", "Cashier")
                        .WithMany()
                        .HasForeignKey("CashierEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cashier");
                });

            modelBuilder.Entity("ServiceLibrary.Models.Item", b =>
                {
                    b.HasOne("ServiceLibrary.Models.Invoice", "Invoice")
                        .WithMany("Items")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServiceLibrary.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ServiceLibrary.Models.Product", b =>
                {
                    b.HasOne("ServiceLibrary.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ServiceLibrary.Models.Timestamp", b =>
                {
                    b.HasOne("ServiceLibrary.Models.User", "Cashier")
                        .WithMany()
                        .HasForeignKey("CashierEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServiceLibrary.Models.User", "ManagerIn")
                        .WithMany()
                        .HasForeignKey("ManagerInEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServiceLibrary.Models.User", "ManagerOut")
                        .WithMany()
                        .HasForeignKey("ManagerOutEmail");

                    b.Navigation("Cashier");

                    b.Navigation("ManagerIn");

                    b.Navigation("ManagerOut");
                });

            modelBuilder.Entity("ServiceLibrary.Models.Invoice", b =>
                {
                    b.Navigation("AlternativePayments");

                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
